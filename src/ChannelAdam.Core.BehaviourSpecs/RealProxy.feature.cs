// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ChannelAdam.Core.BehaviourSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RealProxyFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RealProxy.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Real Proxy", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Real Proxy")))
            {
                ChannelAdam.Core.BehaviourSpecs.RealProxyFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RealProxy - UT-01 - Should return a value when calling a function through the obj" +
            "ect real proxy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Real Proxy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void RealProxy_UT_01_ShouldReturnAValueWhenCallingAFunctionThroughTheObjectRealProxy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RealProxy - UT-01 - Should return a value when calling a function through the obj" +
                    "ect real proxy", new string[] {
                        "UnitTest"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("a proxied function with a return value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.When("the proxied function with a return value is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.Then("the value returned from the proxied function with a return value has the correct " +
                    "return value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RealProxy - UT-02 - Should allow usage of ref parameters when calling a method th" +
            "rough the object real proxy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Real Proxy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void RealProxy_UT_02_ShouldAllowUsageOfRefParametersWhenCallingAMethodThroughTheObjectRealProxy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RealProxy - UT-02 - Should allow usage of ref parameters when calling a method th" +
                    "rough the object real proxy", new string[] {
                        "UnitTest"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("a proxied method with ref parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.When("the proxied method with ref parameters is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("the ref parameters from the proxied method have the correct values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RealProxy - UT-03 - Should allow usage of in, out and ref parameters when calling" +
            " a function through the object real proxy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Real Proxy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void RealProxy_UT_03_ShouldAllowUsageOfInOutAndRefParametersWhenCallingAFunctionThroughTheObjectRealProxy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RealProxy - UT-03 - Should allow usage of in, out and ref parameters when calling" +
                    " a function through the object real proxy", new string[] {
                        "UnitTest"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("a proxied function with in, out and ref parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When("the proxied function with in, out and ref parameters is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("the return value, out and ref parameters from the proxied function have the corre" +
                    "ct values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

